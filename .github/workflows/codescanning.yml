

name: CodeScanning

on:
  push:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug]

    runs-on: windows-latest  
    env:
      Solution_Name: TraxAct.sln                        
      Test_Project_Path: TraxAct/TraxActUnitTests/TraxActUnitTests.csproj              

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x

    # Add  MSBuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2
    
    # Run .NET Code Analysis
    - name: Run Code Analysis
      run: dotnet build /p:ReportAnalyzer=true TraxAct/TraxAct.sln

    - name: Install Codacy Analysis CLI
      run: |
        Invoke-WebRequest -Uri "https://api.codacy.com/downloadLatest/cli?windows" -OutFile "codacy-cli.zip"
        Expand-Archive -Path "codacy-cli.zip" -DestinationPath "C:\codacy"
        $env:Path += ";C:\codacy"
        Remove-Item "codacy-cli.zip"

    - name: Generate Codacy report
      run: codacy-coverage-reporter analyze -r coverage.xml

    - name: Upload Codacy report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: codacy-report
        path: coverage.xml
    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}


    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
